{"ast":null,"code":"const apiCall = (url, method, body, resolve, reject) => fetch(url, {\n  method: method,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  },\n  body: JSON.stringify(body)\n}).then(response => {\n  response.json().then(json => resolve(json));\n}).catch(error => console.error(error));\n\nexport const get = url => new Promise((resolve, reject) => {\n  fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8',\n      'Authorization': 'JWT ' + localStorage.token\n    }\n  }).then(response => response.json()).then(json => resolve(json)).catch(error => console.error(error));\n});\nexport const post = (url, body) => new Promise((resolve, reject) => apiCall(url, 'POST', body, resolve, reject));\nexport const put = (url, body) => new Promise((resolve, reject) => apiCall(url, 'PUT', body, resolve, reject));\nexport const del = url => new Promise((resolve, reject) => {\n  fetch(url, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8'\n    }\n  }).then(response => {\n    if (response.ok) {\n      resolve(response);\n    } else {\n      reject(response);\n    }\n  });\n});","map":{"version":3,"sources":["/Users/rafalskrzydelski/development/django/wealth_frontend/src/api/api.js"],"names":["apiCall","url","method","body","resolve","reject","fetch","headers","JSON","stringify","then","response","json","catch","error","console","get","Promise","localStorage","token","post","put","del","ok"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoBC,OAApB,EAA6BC,MAA7B,KACdC,KAAK,CAACL,GAAD,EAAM;AACTC,EAAAA,MAAM,EAAEA,MADC;AAETK,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFA;AAKTJ,EAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AALG,CAAN,CAAL,CAMGO,IANH,CAMQC,QAAQ,IAAI;AAClBA,EAAAA,QAAQ,CAACC,IAAT,GACGF,IADH,CACQE,IAAI,IAAIR,OAAO,CAACQ,IAAD,CADvB;AAED,CATD,EASGC,KATH,CASUC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CATnB,CADF;;AAYA,OAAO,MAAME,GAAG,GAAGf,GAAG,IACpB,IAAIgB,OAAJ,CACE,CAACb,OAAD,EAAUC,MAAV,KAAqB;AACnBC,EAAAA,KAAK,CAACL,GAAD,EAAM;AACTC,IAAAA,MAAM,EAAE,KADC;AAETK,IAAAA,OAAO,EAAE;AACP,sBAAgB,iCADT;AAEP,uBAAiB,SAASW,YAAY,CAACC;AAFhC;AAFA,GAAN,CAAL,CAOGT,IAPH,CAOQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPpB,EAQGF,IARH,CAQQE,IAAI,IAAIR,OAAO,CAACQ,IAAD,CARvB,EASGC,KATH,CASUC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CATnB;AAUD,CAZH,CADK;AAgBP,OAAO,MAAMM,IAAI,GAAG,CAACnB,GAAD,EAAME,IAAN,KAClB,IAAIc,OAAJ,CACE,CAACb,OAAD,EAAUC,MAAV,KAAqBL,OAAO,CAACC,GAAD,EAAM,MAAN,EAAcE,IAAd,EAAoBC,OAApB,EAA6BC,MAA7B,CAD9B,CADK;AAKP,OAAO,MAAMgB,GAAG,GAAG,CAACpB,GAAD,EAAME,IAAN,KACjB,IAAIc,OAAJ,CACE,CAACb,OAAD,EAAUC,MAAV,KAAqBL,OAAO,CAACC,GAAD,EAAM,KAAN,EAAaE,IAAb,EAAmBC,OAAnB,EAA4BC,MAA5B,CAD9B,CADK;AAKP,OAAO,MAAMiB,GAAG,GAAGrB,GAAG,IACpB,IAAIgB,OAAJ,CACE,CAACb,OAAD,EAAUC,MAAV,KAAqB;AACnBC,EAAAA,KAAK,CAACL,GAAD,EAAM;AACTC,IAAAA,MAAM,EAAE,QADC;AAETK,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAFA,GAAN,CAAL,CAKGG,IALH,CAKQC,QAAQ,IAAI;AAClB,QAAIA,QAAQ,CAACY,EAAb,EAAiB;AACfnB,MAAAA,OAAO,CAACO,QAAD,CAAP;AACD,KAFD,MAEO;AACLN,MAAAA,MAAM,CAACM,QAAD,CAAN;AACD;AACF,GAXD;AAYD,CAdH,CADK","sourcesContent":["const apiCall = (url, method, body, resolve, reject) =>\n  fetch(url, {\n    method: method,\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8'\n    },\n    body: JSON.stringify(body)\n  }).then(response => {\n    response.json()\n      .then(json => resolve(json))\n  }).catch( error => console.error(error))\n\nexport const get = url =>\n  new Promise(\n    (resolve, reject) => {\n      fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          'Authorization': 'JWT ' + localStorage.token\n        }\n      })\n        .then(response => response.json())\n        .then(json => resolve(json))\n        .catch( error => console.error(error))\n    }\n  )\n\nexport const post = (url, body) =>\n  new Promise(\n    (resolve, reject) => apiCall(url, 'POST', body, resolve, reject)\n  )\n\nexport const put = (url, body) =>\n  new Promise(\n    (resolve, reject) => apiCall(url, 'PUT', body, resolve, reject)\n  )\n\nexport const del = url =>\n  new Promise(\n    (resolve, reject) => {\n      fetch(url, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8'\n        }\n      }).then(response => {\n        if (response.ok) {\n          resolve(response)\n        } else {\n          reject(response)\n        }\n      })\n    }\n  )\n"]},"metadata":{},"sourceType":"module"}